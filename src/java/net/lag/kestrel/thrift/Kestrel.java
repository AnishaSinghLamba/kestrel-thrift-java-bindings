/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package net.lag.kestrel.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Kestrel {

  public interface Iface {

    public int put(String queue_name, List<byte[]> items, int expiration_msec) throws TException;

    public List<Item> get(String queue_name, int max_items, int timeout_msec, boolean auto_confirm) throws TException;

    public int confirm(String queue_name, Set<Integer> xids) throws TException;

    public int abort(String queue_name, Set<Integer> xids) throws TException;

    public QueueInfo peek(String queue_name) throws TException;

    public void flush(String queue_name) throws TException;

    public void delete_queue(String queue_name) throws TException;

    public String get_version() throws TException;

    public void flush_all() throws TException;

    public int flush_all_expired() throws TException;

  }

  public interface AsyncIface {

    public void put(String queue_name, List<byte[]> items, int expiration_msec, AsyncMethodCallback<AsyncClient.put_call> resultHandler) throws TException;

    public void get(String queue_name, int max_items, int timeout_msec, boolean auto_confirm, AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws TException;

    public void confirm(String queue_name, Set<Integer> xids, AsyncMethodCallback<AsyncClient.confirm_call> resultHandler) throws TException;

    public void abort(String queue_name, Set<Integer> xids, AsyncMethodCallback<AsyncClient.abort_call> resultHandler) throws TException;

    public void peek(String queue_name, AsyncMethodCallback<AsyncClient.peek_call> resultHandler) throws TException;

    public void flush(String queue_name, AsyncMethodCallback<AsyncClient.flush_call> resultHandler) throws TException;

    public void delete_queue(String queue_name, AsyncMethodCallback<AsyncClient.delete_queue_call> resultHandler) throws TException;

    public void get_version(AsyncMethodCallback<AsyncClient.get_version_call> resultHandler) throws TException;

    public void flush_all(AsyncMethodCallback<AsyncClient.flush_all_call> resultHandler) throws TException;

    public void flush_all_expired(AsyncMethodCallback<AsyncClient.flush_all_expired_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public int put(String queue_name, List<byte[]> items, int expiration_msec) throws TException
    {
      send_put(queue_name, items, expiration_msec);
      return recv_put();
    }

    public void send_put(String queue_name, List<byte[]> items, int expiration_msec) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("put", TMessageType.CALL, ++seqid_));
      put_args args = new put_args();
      args.set_queue_name(queue_name);
      args.set_items(items);
      args.set_expiration_msec(expiration_msec);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_put() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "put failed: out of sequence response");
      }
      put_result result = new put_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "put failed: unknown result");
    }

    public List<Item> get(String queue_name, int max_items, int timeout_msec, boolean auto_confirm) throws TException
    {
      send_get(queue_name, max_items, timeout_msec, auto_confirm);
      return recv_get();
    }

    public void send_get(String queue_name, int max_items, int timeout_msec, boolean auto_confirm) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get", TMessageType.CALL, ++seqid_));
      get_args args = new get_args();
      args.set_queue_name(queue_name);
      args.set_max_items(max_items);
      args.set_timeout_msec(timeout_msec);
      args.set_auto_confirm(auto_confirm);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Item> recv_get() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "get failed: out of sequence response");
      }
      get_result result = new get_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public int confirm(String queue_name, Set<Integer> xids) throws TException
    {
      send_confirm(queue_name, xids);
      return recv_confirm();
    }

    public void send_confirm(String queue_name, Set<Integer> xids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("confirm", TMessageType.CALL, ++seqid_));
      confirm_args args = new confirm_args();
      args.set_queue_name(queue_name);
      args.set_xids(xids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_confirm() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "confirm failed: out of sequence response");
      }
      confirm_result result = new confirm_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "confirm failed: unknown result");
    }

    public int abort(String queue_name, Set<Integer> xids) throws TException
    {
      send_abort(queue_name, xids);
      return recv_abort();
    }

    public void send_abort(String queue_name, Set<Integer> xids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("abort", TMessageType.CALL, ++seqid_));
      abort_args args = new abort_args();
      args.set_queue_name(queue_name);
      args.set_xids(xids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_abort() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "abort failed: out of sequence response");
      }
      abort_result result = new abort_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "abort failed: unknown result");
    }

    public QueueInfo peek(String queue_name) throws TException
    {
      send_peek(queue_name);
      return recv_peek();
    }

    public void send_peek(String queue_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("peek", TMessageType.CALL, ++seqid_));
      peek_args args = new peek_args();
      args.set_queue_name(queue_name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public QueueInfo recv_peek() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "peek failed: out of sequence response");
      }
      peek_result result = new peek_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "peek failed: unknown result");
    }

    public void flush(String queue_name) throws TException
    {
      send_flush(queue_name);
      recv_flush();
    }

    public void send_flush(String queue_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("flush", TMessageType.CALL, ++seqid_));
      flush_args args = new flush_args();
      args.set_queue_name(queue_name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_flush() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "flush failed: out of sequence response");
      }
      flush_result result = new flush_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void delete_queue(String queue_name) throws TException
    {
      send_delete_queue(queue_name);
      recv_delete_queue();
    }

    public void send_delete_queue(String queue_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("delete_queue", TMessageType.CALL, ++seqid_));
      delete_queue_args args = new delete_queue_args();
      args.set_queue_name(queue_name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_delete_queue() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "delete_queue failed: out of sequence response");
      }
      delete_queue_result result = new delete_queue_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public String get_version() throws TException
    {
      send_get_version();
      return recv_get_version();
    }

    public void send_get_version() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_version", TMessageType.CALL, ++seqid_));
      get_version_args args = new get_version_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_version() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "get_version failed: out of sequence response");
      }
      get_version_result result = new get_version_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_version failed: unknown result");
    }

    public void flush_all() throws TException
    {
      send_flush_all();
      recv_flush_all();
    }

    public void send_flush_all() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("flush_all", TMessageType.CALL, ++seqid_));
      flush_all_args args = new flush_all_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_flush_all() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "flush_all failed: out of sequence response");
      }
      flush_all_result result = new flush_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public int flush_all_expired() throws TException
    {
      send_flush_all_expired();
      return recv_flush_all_expired();
    }

    public void send_flush_all_expired() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("flush_all_expired", TMessageType.CALL, ++seqid_));
      flush_all_expired_args args = new flush_all_expired_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_flush_all_expired() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "flush_all_expired failed: out of sequence response");
      }
      flush_all_expired_result result = new flush_all_expired_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "flush_all_expired failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void put(String queue_name, List<byte[]> items, int expiration_msec, AsyncMethodCallback<put_call> resultHandler) throws TException {
      checkReady();
      put_call method_call = new put_call(queue_name, items, expiration_msec, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class put_call extends TAsyncMethodCall {
      private String queue_name;
      private List<byte[]> items;
      private int expiration_msec;
      public put_call(String queue_name, List<byte[]> items, int expiration_msec, AsyncMethodCallback<put_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
        this.items = items;
        this.expiration_msec = expiration_msec;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("put", TMessageType.CALL, 0));
        put_args args = new put_args();
        args.set_queue_name(queue_name);
        args.set_items(items);
        args.set_expiration_msec(expiration_msec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_put();
      }
    }

    public void get(String queue_name, int max_items, int timeout_msec, boolean auto_confirm, AsyncMethodCallback<get_call> resultHandler) throws TException {
      checkReady();
      get_call method_call = new get_call(queue_name, max_items, timeout_msec, auto_confirm, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class get_call extends TAsyncMethodCall {
      private String queue_name;
      private int max_items;
      private int timeout_msec;
      private boolean auto_confirm;
      public get_call(String queue_name, int max_items, int timeout_msec, boolean auto_confirm, AsyncMethodCallback<get_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
        this.max_items = max_items;
        this.timeout_msec = timeout_msec;
        this.auto_confirm = auto_confirm;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("get", TMessageType.CALL, 0));
        get_args args = new get_args();
        args.set_queue_name(queue_name);
        args.set_max_items(max_items);
        args.set_timeout_msec(timeout_msec);
        args.set_auto_confirm(auto_confirm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void confirm(String queue_name, Set<Integer> xids, AsyncMethodCallback<confirm_call> resultHandler) throws TException {
      checkReady();
      confirm_call method_call = new confirm_call(queue_name, xids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class confirm_call extends TAsyncMethodCall {
      private String queue_name;
      private Set<Integer> xids;
      public confirm_call(String queue_name, Set<Integer> xids, AsyncMethodCallback<confirm_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
        this.xids = xids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("confirm", TMessageType.CALL, 0));
        confirm_args args = new confirm_args();
        args.set_queue_name(queue_name);
        args.set_xids(xids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirm();
      }
    }

    public void abort(String queue_name, Set<Integer> xids, AsyncMethodCallback<abort_call> resultHandler) throws TException {
      checkReady();
      abort_call method_call = new abort_call(queue_name, xids, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class abort_call extends TAsyncMethodCall {
      private String queue_name;
      private Set<Integer> xids;
      public abort_call(String queue_name, Set<Integer> xids, AsyncMethodCallback<abort_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
        this.xids = xids;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("abort", TMessageType.CALL, 0));
        abort_args args = new abort_args();
        args.set_queue_name(queue_name);
        args.set_xids(xids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abort();
      }
    }

    public void peek(String queue_name, AsyncMethodCallback<peek_call> resultHandler) throws TException {
      checkReady();
      peek_call method_call = new peek_call(queue_name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class peek_call extends TAsyncMethodCall {
      private String queue_name;
      public peek_call(String queue_name, AsyncMethodCallback<peek_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("peek", TMessageType.CALL, 0));
        peek_args args = new peek_args();
        args.set_queue_name(queue_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueueInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_peek();
      }
    }

    public void flush(String queue_name, AsyncMethodCallback<flush_call> resultHandler) throws TException {
      checkReady();
      flush_call method_call = new flush_call(queue_name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class flush_call extends TAsyncMethodCall {
      private String queue_name;
      public flush_call(String queue_name, AsyncMethodCallback<flush_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("flush", TMessageType.CALL, 0));
        flush_args args = new flush_args();
        args.set_queue_name(queue_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_flush();
      }
    }

    public void delete_queue(String queue_name, AsyncMethodCallback<delete_queue_call> resultHandler) throws TException {
      checkReady();
      delete_queue_call method_call = new delete_queue_call(queue_name, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class delete_queue_call extends TAsyncMethodCall {
      private String queue_name;
      public delete_queue_call(String queue_name, AsyncMethodCallback<delete_queue_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queue_name = queue_name;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("delete_queue", TMessageType.CALL, 0));
        delete_queue_args args = new delete_queue_args();
        args.set_queue_name(queue_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_delete_queue();
      }
    }

    public void get_version(AsyncMethodCallback<get_version_call> resultHandler) throws TException {
      checkReady();
      get_version_call method_call = new get_version_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class get_version_call extends TAsyncMethodCall {
      public get_version_call(AsyncMethodCallback<get_version_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("get_version", TMessageType.CALL, 0));
        get_version_args args = new get_version_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_version();
      }
    }

    public void flush_all(AsyncMethodCallback<flush_all_call> resultHandler) throws TException {
      checkReady();
      flush_all_call method_call = new flush_all_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class flush_all_call extends TAsyncMethodCall {
      public flush_all_call(AsyncMethodCallback<flush_all_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("flush_all", TMessageType.CALL, 0));
        flush_all_args args = new flush_all_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_flush_all();
      }
    }

    public void flush_all_expired(AsyncMethodCallback<flush_all_expired_call> resultHandler) throws TException {
      checkReady();
      flush_all_expired_call method_call = new flush_all_expired_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class flush_all_expired_call extends TAsyncMethodCall {
      public flush_all_expired_call(AsyncMethodCallback<flush_all_expired_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("flush_all_expired", TMessageType.CALL, 0));
        flush_all_expired_args args = new flush_all_expired_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_flush_all_expired();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("put", new put());
      processMap_.put("get", new get());
      processMap_.put("confirm", new confirm());
      processMap_.put("abort", new abort());
      processMap_.put("peek", new peek());
      processMap_.put("flush", new flush());
      processMap_.put("delete_queue", new delete_queue());
      processMap_.put("get_version", new get_version());
      processMap_.put("flush_all", new flush_all());
      processMap_.put("flush_all_expired", new flush_all_expired());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class put implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        put_args args = new put_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("put", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        put_result result = new put_result();
        result.success = iface_.put(args.queue_name, args.items, args.expiration_msec);
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("put", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_args args = new get_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_result result = new get_result();
        result.success = iface_.get(args.queue_name, args.max_items, args.timeout_msec, args.auto_confirm);
        oprot.writeMessageBegin(new TMessage("get", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class confirm implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        confirm_args args = new confirm_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("confirm", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        confirm_result result = new confirm_result();
        result.success = iface_.confirm(args.queue_name, args.xids);
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("confirm", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class abort implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        abort_args args = new abort_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("abort", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        abort_result result = new abort_result();
        result.success = iface_.abort(args.queue_name, args.xids);
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("abort", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class peek implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        peek_args args = new peek_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("peek", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        peek_result result = new peek_result();
        result.success = iface_.peek(args.queue_name);
        oprot.writeMessageBegin(new TMessage("peek", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class flush implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        flush_args args = new flush_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("flush", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        flush_result result = new flush_result();
        iface_.flush(args.queue_name);
        oprot.writeMessageBegin(new TMessage("flush", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class delete_queue implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        delete_queue_args args = new delete_queue_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("delete_queue", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        delete_queue_result result = new delete_queue_result();
        iface_.delete_queue(args.queue_name);
        oprot.writeMessageBegin(new TMessage("delete_queue", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_version implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_version_args args = new get_version_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("get_version", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_version_result result = new get_version_result();
        result.success = iface_.get_version();
        oprot.writeMessageBegin(new TMessage("get_version", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class flush_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        flush_all_args args = new flush_all_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("flush_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        flush_all_result result = new flush_all_result();
        iface_.flush_all();
        oprot.writeMessageBegin(new TMessage("flush_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class flush_all_expired implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        flush_all_expired_args args = new flush_all_expired_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("flush_all_expired", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        flush_all_expired_result result = new flush_all_expired_result();
        result.success = iface_.flush_all_expired();
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("flush_all_expired", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class put_args implements TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("put_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);
    private static final TField ITEMS_FIELD_DESC = new TField("items", TType.LIST, (short)2);
    private static final TField EXPIRATION_MSEC_FIELD_DESC = new TField("expiration_msec", TType.I32, (short)3);

    private String queue_name;
    private List<byte[]> items;
    private int expiration_msec;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name"),
      ITEMS((short)2, "items"),
      EXPIRATION_MSEC((short)3, "expiration_msec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // ITEMS
            return ITEMS;
          case 3: // EXPIRATION_MSEC
            return EXPIRATION_MSEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPIRATION_MSEC_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ITEMS, new FieldMetaData("items", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.EXPIRATION_MSEC, new FieldMetaData("expiration_msec", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
      this.expiration_msec = 0;

    }

    public put_args(
      String queue_name,
      List<byte[]> items,
      int expiration_msec)
    {
      this();
      this.queue_name = queue_name;
      this.items = items;
      this.expiration_msec = expiration_msec;
      set_expiration_msec_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
      if (other.is_set_items()) {
        List<byte[]> __this__items = new ArrayList<byte[]>();
        for (byte[] other_element : other.items) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__items.add(temp_binary_element);
        }
        this.items = __this__items;
      }
      this.expiration_msec = other.expiration_msec;
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Deprecated
    public put_args clone() {
      return new put_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public int get_items_size() {
      return (this.items == null) ? 0 : this.items.size();
    }

    public java.util.Iterator<byte[]> get_items_iterator() {
      return (this.items == null) ? null : this.items.iterator();
    }

    public void add_to_items(byte[] elem) {
      if (this.items == null) {
        this.items = new ArrayList<byte[]>();
      }
      this.items.add(elem);
    }

    public List<byte[]> get_items() {
      return this.items;
    }

    public void set_items(List<byte[]> items) {
      this.items = items;
    }

    public void unset_items() {
      this.items = null;
    }

    /** Returns true if field items is set (has been asigned a value) and false otherwise */
    public boolean is_set_items() {
      return this.items != null;
    }

    public void set_items_isSet(boolean value) {
      if (!value) {
        this.items = null;
      }
    }

    public int get_expiration_msec() {
      return this.expiration_msec;
    }

    public void set_expiration_msec(int expiration_msec) {
      this.expiration_msec = expiration_msec;
      set_expiration_msec_isSet(true);
    }

    public void unset_expiration_msec() {
      __isset_bit_vector.clear(__EXPIRATION_MSEC_ISSET_ID);
    }

    /** Returns true if field expiration_msec is set (has been asigned a value) and false otherwise */
    public boolean is_set_expiration_msec() {
      return __isset_bit_vector.get(__EXPIRATION_MSEC_ISSET_ID);
    }

    public void set_expiration_msec_isSet(boolean value) {
      __isset_bit_vector.set(__EXPIRATION_MSEC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      case ITEMS:
        if (value == null) {
          unset_items();
        } else {
          set_items((List<byte[]>)value);
        }
        break;

      case EXPIRATION_MSEC:
        if (value == null) {
          unset_expiration_msec();
        } else {
          set_expiration_msec((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      case ITEMS:
        return get_items();

      case EXPIRATION_MSEC:
        return new Integer(get_expiration_msec());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      case ITEMS:
        return is_set_items();
      case EXPIRATION_MSEC:
        return is_set_expiration_msec();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      boolean this_present_items = true && this.is_set_items();
      boolean that_present_items = true && that.is_set_items();
      if (this_present_items || that_present_items) {
        if (!(this_present_items && that_present_items))
          return false;
        if (!this.items.equals(that.items))
          return false;
      }

      boolean this_present_expiration_msec = true;
      boolean that_present_expiration_msec = true;
      if (this_present_expiration_msec || that_present_expiration_msec) {
        if (!(this_present_expiration_msec && that_present_expiration_msec))
          return false;
        if (this.expiration_msec != that.expiration_msec)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      boolean present_items = true && (is_set_items());
      builder.append(present_items);
      if (present_items)
        builder.append(items);

      boolean present_expiration_msec = true;
      builder.append(present_expiration_msec);
      if (present_expiration_msec)
        builder.append(expiration_msec);

      return builder.toHashCode();
    }

    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      put_args typedOther = (put_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_items()).compareTo(typedOther.is_set_items());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_items()) {        lastComparison = TBaseHelper.compareTo(this.items, typedOther.items);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_expiration_msec()).compareTo(typedOther.is_set_expiration_msec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_expiration_msec()) {        lastComparison = TBaseHelper.compareTo(this.expiration_msec, typedOther.expiration_msec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ITEMS
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.items = new ArrayList<byte[]>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  byte[] _elem2;
                  _elem2 = iprot.readBinary();
                  this.items.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // EXPIRATION_MSEC
            if (field.type == TType.I32) {
              this.expiration_msec = iprot.readI32();
              set_expiration_msec_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      if (this.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.items.size()));
          for (byte[] _iter3 : this.items)
          {
            oprot.writeBinary(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRATION_MSEC_FIELD_DESC);
      oprot.writeI32(this.expiration_msec);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expiration_msec:");
      sb.append(this.expiration_msec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class put_result implements TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("put_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      int success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Deprecated
    public put_result clone() {
      return new put_result(this);
    }

    public int get_success() {
      return this.success;
    }

    public void set_success(int success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(get_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      put_result typedOther = (put_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_args implements TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);
    private static final TField MAX_ITEMS_FIELD_DESC = new TField("max_items", TType.I32, (short)2);
    private static final TField TIMEOUT_MSEC_FIELD_DESC = new TField("timeout_msec", TType.I32, (short)3);
    private static final TField AUTO_CONFIRM_FIELD_DESC = new TField("auto_confirm", TType.BOOL, (short)4);

    private String queue_name;
    private int max_items;
    private int timeout_msec;
    private boolean auto_confirm;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name"),
      MAX_ITEMS((short)2, "max_items"),
      TIMEOUT_MSEC((short)3, "timeout_msec"),
      AUTO_CONFIRM((short)4, "auto_confirm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // MAX_ITEMS
            return MAX_ITEMS;
          case 3: // TIMEOUT_MSEC
            return TIMEOUT_MSEC;
          case 4: // AUTO_CONFIRM
            return AUTO_CONFIRM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_ITEMS_ISSET_ID = 0;
    private static final int __TIMEOUT_MSEC_ISSET_ID = 1;
    private static final int __AUTO_CONFIRM_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.MAX_ITEMS, new FieldMetaData("max_items", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.TIMEOUT_MSEC, new FieldMetaData("timeout_msec", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.AUTO_CONFIRM, new FieldMetaData("auto_confirm", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
      this.timeout_msec = 0;

      this.auto_confirm = true;

    }

    public get_args(
      String queue_name,
      int max_items,
      int timeout_msec,
      boolean auto_confirm)
    {
      this();
      this.queue_name = queue_name;
      this.max_items = max_items;
      set_max_items_isSet(true);
      this.timeout_msec = timeout_msec;
      set_timeout_msec_isSet(true);
      this.auto_confirm = auto_confirm;
      set_auto_confirm_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
      this.max_items = other.max_items;
      this.timeout_msec = other.timeout_msec;
      this.auto_confirm = other.auto_confirm;
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Deprecated
    public get_args clone() {
      return new get_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public int get_max_items() {
      return this.max_items;
    }

    public void set_max_items(int max_items) {
      this.max_items = max_items;
      set_max_items_isSet(true);
    }

    public void unset_max_items() {
      __isset_bit_vector.clear(__MAX_ITEMS_ISSET_ID);
    }

    /** Returns true if field max_items is set (has been asigned a value) and false otherwise */
    public boolean is_set_max_items() {
      return __isset_bit_vector.get(__MAX_ITEMS_ISSET_ID);
    }

    public void set_max_items_isSet(boolean value) {
      __isset_bit_vector.set(__MAX_ITEMS_ISSET_ID, value);
    }

    public int get_timeout_msec() {
      return this.timeout_msec;
    }

    public void set_timeout_msec(int timeout_msec) {
      this.timeout_msec = timeout_msec;
      set_timeout_msec_isSet(true);
    }

    public void unset_timeout_msec() {
      __isset_bit_vector.clear(__TIMEOUT_MSEC_ISSET_ID);
    }

    /** Returns true if field timeout_msec is set (has been asigned a value) and false otherwise */
    public boolean is_set_timeout_msec() {
      return __isset_bit_vector.get(__TIMEOUT_MSEC_ISSET_ID);
    }

    public void set_timeout_msec_isSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MSEC_ISSET_ID, value);
    }

    public boolean is_auto_confirm() {
      return this.auto_confirm;
    }

    public void set_auto_confirm(boolean auto_confirm) {
      this.auto_confirm = auto_confirm;
      set_auto_confirm_isSet(true);
    }

    public void unset_auto_confirm() {
      __isset_bit_vector.clear(__AUTO_CONFIRM_ISSET_ID);
    }

    /** Returns true if field auto_confirm is set (has been asigned a value) and false otherwise */
    public boolean is_set_auto_confirm() {
      return __isset_bit_vector.get(__AUTO_CONFIRM_ISSET_ID);
    }

    public void set_auto_confirm_isSet(boolean value) {
      __isset_bit_vector.set(__AUTO_CONFIRM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      case MAX_ITEMS:
        if (value == null) {
          unset_max_items();
        } else {
          set_max_items((Integer)value);
        }
        break;

      case TIMEOUT_MSEC:
        if (value == null) {
          unset_timeout_msec();
        } else {
          set_timeout_msec((Integer)value);
        }
        break;

      case AUTO_CONFIRM:
        if (value == null) {
          unset_auto_confirm();
        } else {
          set_auto_confirm((Boolean)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      case MAX_ITEMS:
        return new Integer(get_max_items());

      case TIMEOUT_MSEC:
        return new Integer(get_timeout_msec());

      case AUTO_CONFIRM:
        return new Boolean(is_auto_confirm());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      case MAX_ITEMS:
        return is_set_max_items();
      case TIMEOUT_MSEC:
        return is_set_timeout_msec();
      case AUTO_CONFIRM:
        return is_set_auto_confirm();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      boolean this_present_max_items = true;
      boolean that_present_max_items = true;
      if (this_present_max_items || that_present_max_items) {
        if (!(this_present_max_items && that_present_max_items))
          return false;
        if (this.max_items != that.max_items)
          return false;
      }

      boolean this_present_timeout_msec = true;
      boolean that_present_timeout_msec = true;
      if (this_present_timeout_msec || that_present_timeout_msec) {
        if (!(this_present_timeout_msec && that_present_timeout_msec))
          return false;
        if (this.timeout_msec != that.timeout_msec)
          return false;
      }

      boolean this_present_auto_confirm = true;
      boolean that_present_auto_confirm = true;
      if (this_present_auto_confirm || that_present_auto_confirm) {
        if (!(this_present_auto_confirm && that_present_auto_confirm))
          return false;
        if (this.auto_confirm != that.auto_confirm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      boolean present_max_items = true;
      builder.append(present_max_items);
      if (present_max_items)
        builder.append(max_items);

      boolean present_timeout_msec = true;
      builder.append(present_timeout_msec);
      if (present_timeout_msec)
        builder.append(timeout_msec);

      boolean present_auto_confirm = true;
      builder.append(present_auto_confirm);
      if (present_auto_confirm)
        builder.append(auto_confirm);

      return builder.toHashCode();
    }

    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_args typedOther = (get_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_max_items()).compareTo(typedOther.is_set_max_items());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_max_items()) {        lastComparison = TBaseHelper.compareTo(this.max_items, typedOther.max_items);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_timeout_msec()).compareTo(typedOther.is_set_timeout_msec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_timeout_msec()) {        lastComparison = TBaseHelper.compareTo(this.timeout_msec, typedOther.timeout_msec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_auto_confirm()).compareTo(typedOther.is_set_auto_confirm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_auto_confirm()) {        lastComparison = TBaseHelper.compareTo(this.auto_confirm, typedOther.auto_confirm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MAX_ITEMS
            if (field.type == TType.I32) {
              this.max_items = iprot.readI32();
              set_max_items_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TIMEOUT_MSEC
            if (field.type == TType.I32) {
              this.timeout_msec = iprot.readI32();
              set_timeout_msec_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // AUTO_CONFIRM
            if (field.type == TType.BOOL) {
              this.auto_confirm = iprot.readBool();
              set_auto_confirm_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_ITEMS_FIELD_DESC);
      oprot.writeI32(this.max_items);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MSEC_FIELD_DESC);
      oprot.writeI32(this.timeout_msec);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTO_CONFIRM_FIELD_DESC);
      oprot.writeBool(this.auto_confirm);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_items:");
      sb.append(this.max_items);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_msec:");
      sb.append(this.timeout_msec);
      first = false;
      if (!first) sb.append(", ");
      sb.append("auto_confirm:");
      sb.append(this.auto_confirm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_result implements TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private List<Item> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.is_set_success()) {
        List<Item> __this__success = new ArrayList<Item>();
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Deprecated
    public get_result clone() {
      return new get_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> get_success() {
      return this.success;
    }

    public void set_success(List<Item> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Item>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_result typedOther = (get_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<Item>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  Item _elem6;
                  _elem6 = new Item();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Item _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirm_args implements TBase<confirm_args, confirm_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("confirm_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);
    private static final TField XIDS_FIELD_DESC = new TField("xids", TType.SET, (short)2);

    private String queue_name;
    private Set<Integer> xids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name"),
      XIDS((short)2, "xids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // XIDS
            return XIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.XIDS, new FieldMetaData("xids", TFieldRequirementType.DEFAULT, 
          new SetMetaData(TType.SET, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(confirm_args.class, metaDataMap);
    }

    public confirm_args() {
    }

    public confirm_args(
      String queue_name,
      Set<Integer> xids)
    {
      this();
      this.queue_name = queue_name;
      this.xids = xids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirm_args(confirm_args other) {
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
      if (other.is_set_xids()) {
        Set<Integer> __this__xids = new HashSet<Integer>();
        for (Integer other_element : other.xids) {
          __this__xids.add(other_element);
        }
        this.xids = __this__xids;
      }
    }

    public confirm_args deepCopy() {
      return new confirm_args(this);
    }

    @Deprecated
    public confirm_args clone() {
      return new confirm_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public int get_xids_size() {
      return (this.xids == null) ? 0 : this.xids.size();
    }

    public java.util.Iterator<Integer> get_xids_iterator() {
      return (this.xids == null) ? null : this.xids.iterator();
    }

    public void add_to_xids(int elem) {
      if (this.xids == null) {
        this.xids = new HashSet<Integer>();
      }
      this.xids.add(elem);
    }

    public Set<Integer> get_xids() {
      return this.xids;
    }

    public void set_xids(Set<Integer> xids) {
      this.xids = xids;
    }

    public void unset_xids() {
      this.xids = null;
    }

    /** Returns true if field xids is set (has been asigned a value) and false otherwise */
    public boolean is_set_xids() {
      return this.xids != null;
    }

    public void set_xids_isSet(boolean value) {
      if (!value) {
        this.xids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      case XIDS:
        if (value == null) {
          unset_xids();
        } else {
          set_xids((Set<Integer>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      case XIDS:
        return get_xids();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      case XIDS:
        return is_set_xids();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirm_args)
        return this.equals((confirm_args)that);
      return false;
    }

    public boolean equals(confirm_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      boolean this_present_xids = true && this.is_set_xids();
      boolean that_present_xids = true && that.is_set_xids();
      if (this_present_xids || that_present_xids) {
        if (!(this_present_xids && that_present_xids))
          return false;
        if (!this.xids.equals(that.xids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      boolean present_xids = true && (is_set_xids());
      builder.append(present_xids);
      if (present_xids)
        builder.append(xids);

      return builder.toHashCode();
    }

    public int compareTo(confirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      confirm_args typedOther = (confirm_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_xids()).compareTo(typedOther.is_set_xids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_xids()) {        lastComparison = TBaseHelper.compareTo(this.xids, typedOther.xids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // XIDS
            if (field.type == TType.SET) {
              {
                TSet _set8 = iprot.readSetBegin();
                this.xids = new HashSet<Integer>(2*_set8.size);
                for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                {
                  int _elem10;
                  _elem10 = iprot.readI32();
                  this.xids.add(_elem10);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      if (this.xids != null) {
        oprot.writeFieldBegin(XIDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.xids.size()));
          for (int _iter11 : this.xids)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirm_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xids:");
      if (this.xids == null) {
        sb.append("null");
      } else {
        sb.append(this.xids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirm_result implements TBase<confirm_result, confirm_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("confirm_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(confirm_result.class, metaDataMap);
    }

    public confirm_result() {
    }

    public confirm_result(
      int success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirm_result(confirm_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public confirm_result deepCopy() {
      return new confirm_result(this);
    }

    @Deprecated
    public confirm_result clone() {
      return new confirm_result(this);
    }

    public int get_success() {
      return this.success;
    }

    public void set_success(int success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(get_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirm_result)
        return this.equals((confirm_result)that);
      return false;
    }

    public boolean equals(confirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(confirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      confirm_result typedOther = (confirm_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class abort_args implements TBase<abort_args, abort_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("abort_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);
    private static final TField XIDS_FIELD_DESC = new TField("xids", TType.SET, (short)2);

    private String queue_name;
    private Set<Integer> xids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name"),
      XIDS((short)2, "xids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          case 2: // XIDS
            return XIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.XIDS, new FieldMetaData("xids", TFieldRequirementType.DEFAULT, 
          new SetMetaData(TType.SET, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(abort_args.class, metaDataMap);
    }

    public abort_args() {
    }

    public abort_args(
      String queue_name,
      Set<Integer> xids)
    {
      this();
      this.queue_name = queue_name;
      this.xids = xids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abort_args(abort_args other) {
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
      if (other.is_set_xids()) {
        Set<Integer> __this__xids = new HashSet<Integer>();
        for (Integer other_element : other.xids) {
          __this__xids.add(other_element);
        }
        this.xids = __this__xids;
      }
    }

    public abort_args deepCopy() {
      return new abort_args(this);
    }

    @Deprecated
    public abort_args clone() {
      return new abort_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public int get_xids_size() {
      return (this.xids == null) ? 0 : this.xids.size();
    }

    public java.util.Iterator<Integer> get_xids_iterator() {
      return (this.xids == null) ? null : this.xids.iterator();
    }

    public void add_to_xids(int elem) {
      if (this.xids == null) {
        this.xids = new HashSet<Integer>();
      }
      this.xids.add(elem);
    }

    public Set<Integer> get_xids() {
      return this.xids;
    }

    public void set_xids(Set<Integer> xids) {
      this.xids = xids;
    }

    public void unset_xids() {
      this.xids = null;
    }

    /** Returns true if field xids is set (has been asigned a value) and false otherwise */
    public boolean is_set_xids() {
      return this.xids != null;
    }

    public void set_xids_isSet(boolean value) {
      if (!value) {
        this.xids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      case XIDS:
        if (value == null) {
          unset_xids();
        } else {
          set_xids((Set<Integer>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      case XIDS:
        return get_xids();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      case XIDS:
        return is_set_xids();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof abort_args)
        return this.equals((abort_args)that);
      return false;
    }

    public boolean equals(abort_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      boolean this_present_xids = true && this.is_set_xids();
      boolean that_present_xids = true && that.is_set_xids();
      if (this_present_xids || that_present_xids) {
        if (!(this_present_xids && that_present_xids))
          return false;
        if (!this.xids.equals(that.xids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      boolean present_xids = true && (is_set_xids());
      builder.append(present_xids);
      if (present_xids)
        builder.append(xids);

      return builder.toHashCode();
    }

    public int compareTo(abort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      abort_args typedOther = (abort_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_xids()).compareTo(typedOther.is_set_xids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_xids()) {        lastComparison = TBaseHelper.compareTo(this.xids, typedOther.xids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // XIDS
            if (field.type == TType.SET) {
              {
                TSet _set12 = iprot.readSetBegin();
                this.xids = new HashSet<Integer>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  int _elem14;
                  _elem14 = iprot.readI32();
                  this.xids.add(_elem14);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      if (this.xids != null) {
        oprot.writeFieldBegin(XIDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.xids.size()));
          for (int _iter15 : this.xids)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("abort_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xids:");
      if (this.xids == null) {
        sb.append("null");
      } else {
        sb.append(this.xids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class abort_result implements TBase<abort_result, abort_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("abort_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(abort_result.class, metaDataMap);
    }

    public abort_result() {
    }

    public abort_result(
      int success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abort_result(abort_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public abort_result deepCopy() {
      return new abort_result(this);
    }

    @Deprecated
    public abort_result clone() {
      return new abort_result(this);
    }

    public int get_success() {
      return this.success;
    }

    public void set_success(int success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(get_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof abort_result)
        return this.equals((abort_result)that);
      return false;
    }

    public boolean equals(abort_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(abort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      abort_result typedOther = (abort_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("abort_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class peek_args implements TBase<peek_args, peek_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("peek_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);

    private String queue_name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(peek_args.class, metaDataMap);
    }

    public peek_args() {
    }

    public peek_args(
      String queue_name)
    {
      this();
      this.queue_name = queue_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public peek_args(peek_args other) {
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
    }

    public peek_args deepCopy() {
      return new peek_args(this);
    }

    @Deprecated
    public peek_args clone() {
      return new peek_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof peek_args)
        return this.equals((peek_args)that);
      return false;
    }

    public boolean equals(peek_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      return builder.toHashCode();
    }

    public int compareTo(peek_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      peek_args typedOther = (peek_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("peek_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class peek_result implements TBase<peek_result, peek_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("peek_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private QueueInfo success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, QueueInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(peek_result.class, metaDataMap);
    }

    public peek_result() {
    }

    public peek_result(
      QueueInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public peek_result(peek_result other) {
      if (other.is_set_success()) {
        this.success = new QueueInfo(other.success);
      }
    }

    public peek_result deepCopy() {
      return new peek_result(this);
    }

    @Deprecated
    public peek_result clone() {
      return new peek_result(this);
    }

    public QueueInfo get_success() {
      return this.success;
    }

    public void set_success(QueueInfo success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((QueueInfo)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof peek_result)
        return this.equals((peek_result)that);
      return false;
    }

    public boolean equals(peek_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(peek_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      peek_result typedOther = (peek_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new QueueInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("peek_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_args implements TBase<flush_args, flush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);

    private String queue_name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_args.class, metaDataMap);
    }

    public flush_args() {
    }

    public flush_args(
      String queue_name)
    {
      this();
      this.queue_name = queue_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_args(flush_args other) {
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
    }

    public flush_args deepCopy() {
      return new flush_args(this);
    }

    @Deprecated
    public flush_args clone() {
      return new flush_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_args)
        return this.equals((flush_args)that);
      return false;
    }

    public boolean equals(flush_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      return builder.toHashCode();
    }

    public int compareTo(flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_args typedOther = (flush_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_result implements TBase<flush_result, flush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_result.class, metaDataMap);
    }

    public flush_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_result(flush_result other) {
    }

    public flush_result deepCopy() {
      return new flush_result(this);
    }

    @Deprecated
    public flush_result clone() {
      return new flush_result(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_result)
        return this.equals((flush_result)that);
      return false;
    }

    public boolean equals(flush_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_result typedOther = (flush_result)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class delete_queue_args implements TBase<delete_queue_args, delete_queue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_queue_args");

    private static final TField QUEUE_NAME_FIELD_DESC = new TField("queue_name", TType.STRING, (short)1);

    private String queue_name;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      QUEUE_NAME((short)1, "queue_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new FieldMetaData("queue_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(delete_queue_args.class, metaDataMap);
    }

    public delete_queue_args() {
    }

    public delete_queue_args(
      String queue_name)
    {
      this();
      this.queue_name = queue_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_queue_args(delete_queue_args other) {
      if (other.is_set_queue_name()) {
        this.queue_name = other.queue_name;
      }
    }

    public delete_queue_args deepCopy() {
      return new delete_queue_args(this);
    }

    @Deprecated
    public delete_queue_args clone() {
      return new delete_queue_args(this);
    }

    public String get_queue_name() {
      return this.queue_name;
    }

    public void set_queue_name(String queue_name) {
      this.queue_name = queue_name;
    }

    public void unset_queue_name() {
      this.queue_name = null;
    }

    /** Returns true if field queue_name is set (has been asigned a value) and false otherwise */
    public boolean is_set_queue_name() {
      return this.queue_name != null;
    }

    public void set_queue_name_isSet(boolean value) {
      if (!value) {
        this.queue_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unset_queue_name();
        } else {
          set_queue_name((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return get_queue_name();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return is_set_queue_name();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_queue_args)
        return this.equals((delete_queue_args)that);
      return false;
    }

    public boolean equals(delete_queue_args that) {
      if (that == null)
        return false;

      boolean this_present_queue_name = true && this.is_set_queue_name();
      boolean that_present_queue_name = true && that.is_set_queue_name();
      if (this_present_queue_name || that_present_queue_name) {
        if (!(this_present_queue_name && that_present_queue_name))
          return false;
        if (!this.queue_name.equals(that.queue_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_queue_name = true && (is_set_queue_name());
      builder.append(present_queue_name);
      if (present_queue_name)
        builder.append(queue_name);

      return builder.toHashCode();
    }

    public int compareTo(delete_queue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_queue_args typedOther = (delete_queue_args)other;

      lastComparison = Boolean.valueOf(is_set_queue_name()).compareTo(typedOther.is_set_queue_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_queue_name()) {        lastComparison = TBaseHelper.compareTo(this.queue_name, typedOther.queue_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUEUE_NAME
            if (field.type == TType.STRING) {
              this.queue_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.queue_name != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(this.queue_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_queue_args(");
      boolean first = true;

      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class delete_queue_result implements TBase<delete_queue_result, delete_queue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_queue_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(delete_queue_result.class, metaDataMap);
    }

    public delete_queue_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_queue_result(delete_queue_result other) {
    }

    public delete_queue_result deepCopy() {
      return new delete_queue_result(this);
    }

    @Deprecated
    public delete_queue_result clone() {
      return new delete_queue_result(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_queue_result)
        return this.equals((delete_queue_result)that);
      return false;
    }

    public boolean equals(delete_queue_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(delete_queue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_queue_result typedOther = (delete_queue_result)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_queue_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_version_args implements TBase<get_version_args, get_version_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_version_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_version_args.class, metaDataMap);
    }

    public get_version_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_version_args(get_version_args other) {
    }

    public get_version_args deepCopy() {
      return new get_version_args(this);
    }

    @Deprecated
    public get_version_args clone() {
      return new get_version_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_version_args)
        return this.equals((get_version_args)that);
      return false;
    }

    public boolean equals(get_version_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(get_version_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_version_args typedOther = (get_version_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_version_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_version_result implements TBase<get_version_result, get_version_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_version_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_version_result.class, metaDataMap);
    }

    public get_version_result() {
    }

    public get_version_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_version_result(get_version_result other) {
      if (other.is_set_success()) {
        this.success = other.success;
      }
    }

    public get_version_result deepCopy() {
      return new get_version_result(this);
    }

    @Deprecated
    public get_version_result clone() {
      return new get_version_result(this);
    }

    public String get_success() {
      return this.success;
    }

    public void set_success(String success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_version_result)
        return this.equals((get_version_result)that);
      return false;
    }

    public boolean equals(get_version_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(get_version_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_version_result typedOther = (get_version_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_version_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_all_args implements TBase<flush_all_args, flush_all_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_all_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_all_args.class, metaDataMap);
    }

    public flush_all_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_all_args(flush_all_args other) {
    }

    public flush_all_args deepCopy() {
      return new flush_all_args(this);
    }

    @Deprecated
    public flush_all_args clone() {
      return new flush_all_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_all_args)
        return this.equals((flush_all_args)that);
      return false;
    }

    public boolean equals(flush_all_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(flush_all_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_all_args typedOther = (flush_all_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_all_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_all_result implements TBase<flush_all_result, flush_all_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_all_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_all_result.class, metaDataMap);
    }

    public flush_all_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_all_result(flush_all_result other) {
    }

    public flush_all_result deepCopy() {
      return new flush_all_result(this);
    }

    @Deprecated
    public flush_all_result clone() {
      return new flush_all_result(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_all_result)
        return this.equals((flush_all_result)that);
      return false;
    }

    public boolean equals(flush_all_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(flush_all_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_all_result typedOther = (flush_all_result)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_all_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_all_expired_args implements TBase<flush_all_expired_args, flush_all_expired_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_all_expired_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_all_expired_args.class, metaDataMap);
    }

    public flush_all_expired_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_all_expired_args(flush_all_expired_args other) {
    }

    public flush_all_expired_args deepCopy() {
      return new flush_all_expired_args(this);
    }

    @Deprecated
    public flush_all_expired_args clone() {
      return new flush_all_expired_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_all_expired_args)
        return this.equals((flush_all_expired_args)that);
      return false;
    }

    public boolean equals(flush_all_expired_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(flush_all_expired_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_all_expired_args typedOther = (flush_all_expired_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_all_expired_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class flush_all_expired_result implements TBase<flush_all_expired_result, flush_all_expired_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("flush_all_expired_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flush_all_expired_result.class, metaDataMap);
    }

    public flush_all_expired_result() {
    }

    public flush_all_expired_result(
      int success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_all_expired_result(flush_all_expired_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public flush_all_expired_result deepCopy() {
      return new flush_all_expired_result(this);
    }

    @Deprecated
    public flush_all_expired_result clone() {
      return new flush_all_expired_result(this);
    }

    public int get_success() {
      return this.success;
    }

    public void set_success(int success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(get_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_all_expired_result)
        return this.equals((flush_all_expired_result)that);
      return false;
    }

    public boolean equals(flush_all_expired_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(flush_all_expired_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_all_expired_result typedOther = (flush_all_expired_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_all_expired_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
